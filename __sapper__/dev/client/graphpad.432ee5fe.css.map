{
  "version": 3,
  "file": "graphpad.432ee5fe.css",
  "sources": [
    "../../../../../../src/routes/graphpad.svelte"
  ],
  "sourcesContent": [
    "<style>\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    overflow: hidden;\n  }\n\n  body {\n    font: 13px \"Noto Sans\";\n    background:black;\n  }\n\n\n\n  ::placeholder {\n    color: #fff8b8;\n  }\n\n\n\n  .graph {\n    background-color: black;;\n    height:600px;\n    width:100%;\n  }\n</style>\n\n<svelte:head>\n  <title>Graphpad</title>\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n</svelte:head>\n\n<svelte:window on:unload={emitUserDisconnect}/>\n\n<script>\n\n  import { onMount } from 'svelte';\n  import * as vis from 'vis-network';\n  import io from \"socket.io-client\";\n  import { fade } from \"svelte/transition\";\t\n  import Heading from \"../components/Heading.svelte\";\n  \n  var data = {\n    nodes: new vis.DataSet(\n      ),\n    edges: new vis.DataSet()\n  };\n\n  let options = {\n    physics:{\n    enabled: true,\n    }, \n   autoResize: true,\n            height: '100%',\n            width: '100%',\n    interaction: { multiselect: true },\n    nodes:{\n      font: {color: '#ffffff'},\n      shapeProperties: {\n              useBorderWithImage:false,\n              interpolation:true\n      },\n      //color:'#0077C8' \n      color: '#33333333'\n    }, edges: {\n      color: \"0077C8\"\n      ,smooth: { enabled: true}\n    }\n  };\n\n  let network;\n  let nodeUpdating = false;\n\n  onMount(async () => {\n    // create a network\n    var container = document.getElementById('mynet');\n    network = new vis.Network(container, data, {});    \n    network.on(\"select\", function (params) {\n      // nodeSelection.selectNode(params.nodes[0]);\n      //  selection = params;\n    });\n\n\n   \n     data.nodes.on('update', function (event, properties, senderId) { \n       \n     if (!nodeUpdating) {\n         nodeUpdating = true;\n\n       nodeUpdating = false;\n     }\n    });\n\n    setTimeout(() => {\n         // network.fit();\n        }, 1000);\n  \n    });\n  \n\tconst socket = io();\n\n  \n  //let nodeMe={};\n\n\n\t\n\t\n  socket.on(\"message\", function (msg) {\n       console.log(\"server message\", msg);\n   });\n\n  socket.on(\"userGraph\", function(g) {\n  //  console.log(\"userGraph\", g);\n    data.nodes.update(g.nodes);\n    data.edges.update(g.edges);\n  });\n\n  socket.on(\"clear\", function() {\n    console.log(\"clear\");\n    data.nodes.clear();\n    data.edges.clear();    \n  });\n\n\n  socket.on(\"nodeClassUpdated\", function(node) {\n    console.log(\"nodeClassUpdated \", node);\n    nodeUpdating = true;\n    nclass = node.class ? node.class : '';\n   \n    //alert(node.label);\n    nodeUpdating = false; \n    nodeUpdating = true;\n     label = node.label ? node.label : '';\n\n     nodeUpdating = false;\n  });\n\nsocket.on(\"nodeLabelUpdated\", function(node) {\n    console.log(\"nodeLabelUpdated \", node);\n     nodeUpdating = true;\n     let newabel = node.label ? node.label : '';\n     if (newabel!== node.label)\n     nodeUpdating = false;\n  });\n\n  function emitUserDisconnect() {\n\tsocket.emit('user disconnect', name); \n  }\n\n  function changeNode() {\n    //  console.log(\"changeNode\");\n    nclass='foo';  \n  }\n\n  function addNode() {\n    //  console.log(\"changeNode\");\n    socket.emit(\"addNode\");\n  }\n\n  function clear() {\n    //console.log(\"clear\");\n    socket.emit(\"clear\");\n  }\n\n  function clearClasses() {\n   nclass=\"_default\";  \n  }\n\nlet label = '';\n\n$: {\n    if (label!='') {\n        socket.emit(\"updateNodeLabel\", {id:0, label:label})\n    }\n}\n  \n  \nlet nclass = '';\n\n$: {\n    if (nclass!='') {\n        socket.emit(\"updateNodeClass\", {id:0, class:nclass})\n    }\n}\n</script>\n\n<body>\n  <div class=\"graph\" id=\"mynet\"></div>\n  <button on:click={changeNode}>Change Node</button>\n  <button on:click={addNode}>Add Node</button>\n  <button on:click={clear}>Clear</button>\n <button on:click={clearClasses}>Clear classes</button>\nLabel: <input bind:value={label}>\nClass: <input bind:value={nclass}>\n\n\n</body>\n"
  ],
  "names": [],
  "mappings": "AACE,eAAE,CAAC,AACD,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,UAAU,CACtB,QAAQ,CAAE,MAAM,AAClB,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,IAAI,CAAE,IAAI,CAAC,WAAW,CACtB,WAAW,KAAK,AAClB,CAAC,eAID,aAAa,AAAC,CAAC,AACb,KAAK,CAAE,OAAO,AAChB,CAAC,AAID,MAAM,eAAC,CAAC,AACN,gBAAgB,CAAE,KAAK,CACvB,OAAO,KAAK,CACZ,MAAM,IAAI,AACZ,CAAC"
}